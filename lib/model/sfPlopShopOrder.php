
<?php



/**
 * Skeleton subclass for representing a row from the 'sf_plop_shop_order' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.4-dev on:
 *
 * jeu. 26 janv. 2012 11:18:58 CET
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.plugins.sfPlopShopPlugin.lib.model
 */
class sfPlopShopOrder extends BasesfPlopShopOrder {

	public function getProducts()
	{
		if ($this->getsfPlopShopCart())
		{
			return $this->getsfPlopShopCart()->getProducts();
		}

    return array();
	}

  /**
   * Shortcut function
   *
   * @see getsfPlopDuration()
   */
  public function getDuration()
  {
    return $this->getsfPlopShopDuration();
  }

  /**
   * Shortcut function
   *
   * @see getIsPaid()
   */
  public function isPaid()
  {
    return $this->getIsPaid();
  }

  /**
   * Shortcut function
   *
   * @see getInProcess()
   */
  public function inProcess()
  {
    return $this->getInProcess();
  }

  /**
   * Shortcut function
   *
   * @see getIsReady()
   */
  public function isReady()
  {
    return $this->getIsReady();
  }

  /**
   * Shortcut function
   *
   * @see getsfGuardUserAddress()
   */
  public function getAddress()
  {
    return $this->getsfGuardUserAddress();
  }

  /**
   * Check if a currency is attached to the order, otherwise it attaches the
   * first one
   */
  public function checkUnattachedCurrency()
  {
    if (!$this->getsfPlopShopCurrency())
    {
      $currency = sfPlopShopCurrencyQuery::create()->findOne();
      $this->setCurrencyId($currency->getId());
      $this->save();
    }
  }

  public function getCompleteTotalNetPrice()
  {
    $this->checkUnattachedCurrency();
    return $this::getTotalNetPrice() . ' ' . $this->getsfPlopShopCurrency()->getCode();
  }

  public function getCompleteTotalAmount()
  {
    $this->checkUnattachedCurrency();
    return $this::getTotalAmount() . ' ' . $this->getsfPlopShopCurrency()->getCode();
  }

  public function getCurrency()
  {
    $this->checkUnattachedCurrency();
    return $this->getsfPlopShopCurrency()->getCode();
  }

  /**
   * Updates the total amounts except the total amount which need a duration factor
   * @param Boolean $with_save Save the object once the object is updated
   * @return null
   */
  public function updateAmount($with_save = true)
  {
    $total_price = 0;
    $total_tax = 0;
    $total_net_price = 0;
    foreach ($this->getsfPlopShopCart()->getProducts() as $product)
    {
      $total_price += $product->getPrice();
      $total_tax += ($product->getPrice() * $product->getTaxRate());
      $total_net_price += $product->getNetPrice();
    }

    $this->setTotalPrice($total_price);
    $this->setTotalTax($total_tax);
    $this->setTotalNetPrice($total_net_price);

    if ($with_save)
      $this->save();
  }

  /**
   * Updates the total amount according to the duration factor
   * @param Boolean $with_save Save the object once the object is updated
   * @return null
   */
  public function updateTotal($with_save = true)
  {
    $duration = $this->getDuration();
    if ($duration && $this->getTotalNetPrice())
    {
      $factor = $duration->getMonthFactor();
      if (!$factor)
        return;

      $this->setTotalAmount($this->getTotalNetPrice() * $factor);

      if ($with_save)
        $this->save();
    }
  }

  /**
   * Checks if the order is ready to be paid
   * @param Boolean $with_save Save the object once the object is updated
   * @return [type]
   */
  public function checkIsReady($with_save = true)
  {
    if (!$this->isReady() && !$this->isPaid()
      && $this->getAddressId() && $this->getTotalAmount())
    {
      $this->setIsReady(true);

      if ($with_save)
        $this->save();
    }
  }

  public function save(PropelPDO $con = null)
  {

    if ($this->isColumnModified(sfPlopShopOrderPeer::CART_ID))
    {
      $this->updateAmount(false);
    }

    if ($this->isColumnModified(sfPlopShopOrderPeer::DURATION_ID))
    {
      $this->updateTotal(false);
    }

    parent::save($con);

    $this->checkIsReady();
  }

} // sfPlopShopOrder
